kind: Cluster
# [optional]
apiVersion: kind.x-k8s.io/v1alpha4

# Nodes contains the list of nodes defined in the `kind` Cluster
# If unset this will default to a single control-plane node
# Note that if more than one control plane is specified, an external
# control plane load balancer will be provisioned implicitly
# [optional]
nodes:
- role: # control-plane | worker
  image: # "kindest/node:v1.17.2@sha256:59df31fc61d1da5f46e8a61ef612fa53d3f9140f82419d1ef1a6b9656c6b737c"
  extraMounts:
  extraPortMappings:
  kubeadmConfigPatches:
  kubeadmConfigPatchesJSON6902:


#  Networking contains cluster wide network settings
# [optional]
networking:
  DisableDefaultCNI: true | false

# FeatureGates contains a map of Kubernetes feature gates to whether they
# are enabled. The feature gates specified here are passed to all Kubernetes components as flags or in config.
# https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/
# [optional]
featureGates:

# KubeadmConfigPatches are applied to the generated kubeadm config as
# merge patches. The `kind` field must match the target object, and
# if `apiVersion` is specified it will only be applied to matching objects.
# This should be an inline yaml blob-string
# https://tools.ietf.org/html/rfc7386
# The cluster-level patches are appied before the node-level patches.
# [optional]
kubeadmConfigPatches:

# KubeadmConfigPatchesJSON6902 are applied to the generated kubeadm config
# as JSON 6902 patches. The `kind` field must match the target object, and
# if group or version are specified it will only be objects matching the
#
# apiVersion: group+"/"+version
#
# Name and Namespace are now ignored, but the fields continue to exist for
# backwards compatibility of parsing the config. The name of the generated
# config was/is always fixed as is the namespace so these fields have
# always been a no-op.
# https://tools.ietf.org/html/rfc6902
# The cluster-level patches are appied before the node-level patches.
# [optional]
kubeadmConfigPatchesJSON6902:
  
# ContainerdConfigPatches are applied to every node's containerd config
# in the order listed.
# These should be toml stringsto be applied as merge patches
# [optional]
containerdConfigPatches:

# ContainerdConfigPatchesJSON6902 are applied to every node's containerd config
# in the order listed.
# These should be YAML or JSON formatting RFC 6902 JSON patches
# [optional]
containerdConfigPatchesJSON6902: